/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FaceDetectionResultService } from "../faceDetectionResult.service";
import { FaceDetectionResultCreateInput } from "./FaceDetectionResultCreateInput";
import { FaceDetectionResult } from "./FaceDetectionResult";
import { FaceDetectionResultFindManyArgs } from "./FaceDetectionResultFindManyArgs";
import { FaceDetectionResultWhereUniqueInput } from "./FaceDetectionResultWhereUniqueInput";
import { FaceDetectionResultUpdateInput } from "./FaceDetectionResultUpdateInput";

export class FaceDetectionResultControllerBase {
  constructor(protected readonly service: FaceDetectionResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FaceDetectionResult })
  async createFaceDetectionResult(
    @common.Body() data: FaceDetectionResultCreateInput
  ): Promise<FaceDetectionResult> {
    return await this.service.createFaceDetectionResult({
      data: {
        ...data,

        image: data.image
          ? {
              connect: data.image,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        faceCoordinates: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FaceDetectionResult] })
  @ApiNestedQuery(FaceDetectionResultFindManyArgs)
  async faceDetectionResults(
    @common.Req() request: Request
  ): Promise<FaceDetectionResult[]> {
    const args = plainToClass(FaceDetectionResultFindManyArgs, request.query);
    return this.service.faceDetectionResults({
      ...args,
      select: {
        createdAt: true,
        faceCoordinates: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FaceDetectionResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async faceDetectionResult(
    @common.Param() params: FaceDetectionResultWhereUniqueInput
  ): Promise<FaceDetectionResult | null> {
    const result = await this.service.faceDetectionResult({
      where: params,
      select: {
        createdAt: true,
        faceCoordinates: true,
        id: true,

        image: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FaceDetectionResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFaceDetectionResult(
    @common.Param() params: FaceDetectionResultWhereUniqueInput,
    @common.Body() data: FaceDetectionResultUpdateInput
  ): Promise<FaceDetectionResult | null> {
    try {
      return await this.service.updateFaceDetectionResult({
        where: params,
        data: {
          ...data,

          image: data.image
            ? {
                connect: data.image,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          faceCoordinates: true,
          id: true,

          image: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FaceDetectionResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFaceDetectionResult(
    @common.Param() params: FaceDetectionResultWhereUniqueInput
  ): Promise<FaceDetectionResult | null> {
    try {
      return await this.service.deleteFaceDetectionResult({
        where: params,
        select: {
          createdAt: true,
          faceCoordinates: true,
          id: true,

          image: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/get-face-detection-result")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetFaceDetectionResult(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetFaceDetectionResult(body);
  }
}
