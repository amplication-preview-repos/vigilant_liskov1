/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FaceDetectionResult as PrismaFaceDetectionResult,
  Image as PrismaImage,
} from "@prisma/client";

export class FaceDetectionResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FaceDetectionResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.faceDetectionResult.count(args);
  }

  async faceDetectionResults<T extends Prisma.FaceDetectionResultFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaceDetectionResultFindManyArgs>
  ): Promise<PrismaFaceDetectionResult[]> {
    return this.prisma.faceDetectionResult.findMany<Prisma.FaceDetectionResultFindManyArgs>(
      args
    );
  }
  async faceDetectionResult<T extends Prisma.FaceDetectionResultFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FaceDetectionResultFindUniqueArgs>
  ): Promise<PrismaFaceDetectionResult | null> {
    return this.prisma.faceDetectionResult.findUnique(args);
  }
  async createFaceDetectionResult<
    T extends Prisma.FaceDetectionResultCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FaceDetectionResultCreateArgs>
  ): Promise<PrismaFaceDetectionResult> {
    return this.prisma.faceDetectionResult.create<T>(args);
  }
  async updateFaceDetectionResult<
    T extends Prisma.FaceDetectionResultUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FaceDetectionResultUpdateArgs>
  ): Promise<PrismaFaceDetectionResult> {
    return this.prisma.faceDetectionResult.update<T>(args);
  }
  async deleteFaceDetectionResult<
    T extends Prisma.FaceDetectionResultDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FaceDetectionResultDeleteArgs>
  ): Promise<PrismaFaceDetectionResult> {
    return this.prisma.faceDetectionResult.delete(args);
  }

  async getImage(parentId: string): Promise<PrismaImage | null> {
    return this.prisma.faceDetectionResult
      .findUnique({
        where: { id: parentId },
      })
      .image();
  }
  async GetFaceDetectionResult(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
