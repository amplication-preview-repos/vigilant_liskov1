/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FaceDetectionResult } from "./FaceDetectionResult";
import { FaceDetectionResultCountArgs } from "./FaceDetectionResultCountArgs";
import { FaceDetectionResultFindManyArgs } from "./FaceDetectionResultFindManyArgs";
import { FaceDetectionResultFindUniqueArgs } from "./FaceDetectionResultFindUniqueArgs";
import { CreateFaceDetectionResultArgs } from "./CreateFaceDetectionResultArgs";
import { UpdateFaceDetectionResultArgs } from "./UpdateFaceDetectionResultArgs";
import { DeleteFaceDetectionResultArgs } from "./DeleteFaceDetectionResultArgs";
import { Image } from "../../image/base/Image";
import { FaceDetectionResultService } from "../faceDetectionResult.service";
@graphql.Resolver(() => FaceDetectionResult)
export class FaceDetectionResultResolverBase {
  constructor(protected readonly service: FaceDetectionResultService) {}

  async _faceDetectionResultsMeta(
    @graphql.Args() args: FaceDetectionResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FaceDetectionResult])
  async faceDetectionResults(
    @graphql.Args() args: FaceDetectionResultFindManyArgs
  ): Promise<FaceDetectionResult[]> {
    return this.service.faceDetectionResults(args);
  }

  @graphql.Query(() => FaceDetectionResult, { nullable: true })
  async faceDetectionResult(
    @graphql.Args() args: FaceDetectionResultFindUniqueArgs
  ): Promise<FaceDetectionResult | null> {
    const result = await this.service.faceDetectionResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FaceDetectionResult)
  async createFaceDetectionResult(
    @graphql.Args() args: CreateFaceDetectionResultArgs
  ): Promise<FaceDetectionResult> {
    return await this.service.createFaceDetectionResult({
      ...args,
      data: {
        ...args.data,

        image: args.data.image
          ? {
              connect: args.data.image,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FaceDetectionResult)
  async updateFaceDetectionResult(
    @graphql.Args() args: UpdateFaceDetectionResultArgs
  ): Promise<FaceDetectionResult | null> {
    try {
      return await this.service.updateFaceDetectionResult({
        ...args,
        data: {
          ...args.data,

          image: args.data.image
            ? {
                connect: args.data.image,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FaceDetectionResult)
  async deleteFaceDetectionResult(
    @graphql.Args() args: DeleteFaceDetectionResultArgs
  ): Promise<FaceDetectionResult | null> {
    try {
      return await this.service.deleteFaceDetectionResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Image, {
    nullable: true,
    name: "image",
  })
  async getImage(
    @graphql.Parent() parent: FaceDetectionResult
  ): Promise<Image | null> {
    const result = await this.service.getImage(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => String)
  async GetFaceDetectionResult(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetFaceDetectionResult(args);
  }
}
